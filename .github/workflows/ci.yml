name: ci
on: push

jobs:
  # TODO: test "debugging"
  # TODO: test "sql-templating"

  # These are examples with the same structure, we use the same script
  projects:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder:
          # basic
          - ml-basic
          - spec-api-r
          #  intermediate
          - python-api
          # advanced
          - etl
          # guides
          - parametrized
          - spec-api-python
    env:
      FOLDER: ${{ matrix.folder }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - run: |
          eval "$(conda shell.bash hook)"
          conda env create --file environment.yml --name env
          conda activate env

          cd $FOLDER

          if [ -f "setup.py" ]; then
            echo "Found setup.py, installing package..."
            pip install .
          fi

          ploomber build

          # run commands in readme (re-use existing conda env)
          pip install invoke
          # install ploomberutils pkg
          cd ..
          pip install pkg/
          # needed to run the readmes
          pip install ipywidgets
          # some readmes require pygraphviz
          conda install pygraphviz -c conda-forge --yes
          # test readme.md
          invoke build --name $FOLDER

  # The rest have some particular details, so we test them separately

  ml-intermediate:
    runs-on: ubuntu-latest
    name: ml-intermediate
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - run: |
          eval "$(conda shell.bash hook)"
          cd ml-intermediate/
          conda env create --file environment.yml --name env
          conda activate env
          # install ploomberutils
          pip install ../pkg/
          # train
          ploomber build --entry-point pipeline.yaml
          # serve
          ploomber build --entry-point pipeline.serve.yaml
          # TODO: export to argo
          # ploomberutils validate-argo argo.yaml

  spec-api-directory:
    runs-on: ubuntu-latest
    name: spec-api-directory
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - run: |
          eval "$(conda shell.bash hook)"
          cd spec-api-directory/
          conda env create --file environment.yml --name env
          conda activate env
          ploomber build --entry-point '*.py'

  spec-api-sql:
    runs-on: ubuntu-latest
    name: spec-api-sql
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - run: |
          eval "$(conda shell.bash hook)"
          conda env create --file environment.yml --name env
          conda activate env
          cd spec-api-sql/setup/
          bash setup.sh
          cd ..
          ploomber build

  testing:
    runs-on: ubuntu-latest
    name: testing
    steps:
      # this step makes your repo available to the next one
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - run: |
          eval "$(conda shell.bash hook)"
          conda env create --file environment.yml --name env
          conda activate env
          cd testing
          mkdir output
          cd setup && python script.py && cd ..
          ploomber build
  
  ml-advanced:
    runs-on: ubuntu-latest
    name: ml-advanced
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - run: |
          cd ml-advanced
          pip install "."
          pytest

  ml-online:
    runs-on: ubuntu-latest
    name: ml-online
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - run: |
          # install ploomberutils
          pip install pkg/
          cd ml-online
          eval "$(conda shell.bash hook)"
          pip install invoke
          invoke setup
          conda activate ml-online
          ploomber build
          cp products/model.pickle src/ml_online/model.pickle
          invoke test --inplace
          python -m build
          # TODO: export to argo
          # validate argo spec
          # ploomberutils validate-argo argo.yaml
          # TODO: export to airflow
